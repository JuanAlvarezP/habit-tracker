version: 2.1

orbs:
  node: circleci/node@5.2.0

jobs:
  build_and_test:
    docker:
      - image: cimg/python:3.11-node
    working_directory: ~/project
    environment:
      DJANGO_SETTINGS_MODULE: "habit_tracker_backend.settings"
      PYTHONUNBUFFERED: "1"
      VENV_DIR: "venv"
      TARGET_DIR: "/tmp/habit-tracker-prod"
      GITHUB_REPO_OWNER: "JuanAlvarezP"   
      GITHUB_REPO_NAME: "habit-tracker"   
    steps:
      - checkout

      # --- Notify Start (GitHub: pending) ---
      - run:
          name: "Notify start (GitHub: pending)"
          when: always
          command: |
            if [ -n "${GH_TOKEN}" ]; then
              COMMIT_SHA="${CIRCLE_SHA1}"
              curl -sS -X POST \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/statuses/${COMMIT_SHA}" \
                -d "{
                  \"state\": \"pending\",
                  \"target_url\": \"${CIRCLE_BUILD_URL}\",
                  \"description\": \"⏳ Pipeline en ejecución...\",
                  \"context\": \"CircleCI Pipeline\"
                }" || true
              echo "Notificación enviada a GitHub: pending"
            else
              echo "GH_TOKEN no configurado; se omite notificación inicial."
            fi

      # --- Backend: venv + deps ---
      - run:
          name: "Backend | Setup venv + pip deps"
          command: |
            python -m venv "${VENV_DIR}"
            . "${VENV_DIR}/bin/activate"
            python -m pip install --upgrade pip
            ( test -f requirements.txt && pip install -r requirements.txt ) \
              || ( test -f habit_tracker_backend/requirements.txt && pip install -r habit_tracker_backend/requirements.txt ) \
              || true
            pip install pytest pytest-django flake8 coverage gunicorn || true

      # --- Backend: migrations (best effort) ---
      - run:
          name: "Backend | Django migrations"
          command: |
            . "${VENV_DIR}/bin/activate"
            export DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
            ( python manage.py makemigrations --noinput || true )
            ( python manage.py migrate --noinput || true )

      # --- Backend: flake8 ---
      - run:
          name: "Backend | flake8"
          command: |
            . "${VENV_DIR}/bin/activate"
            flake8 --exclude=migrations,venv,habit-tracker-frontend,build . || true

      # --- Backend: pytest + coverage ---
      - run:
          name: "Backend | pytest + coverage"
          command: |
            . "${VENV_DIR}/bin/activate"
            coverage run -m pytest || true
            coverage report -m || true
            coverage xml -o coverage.xml || true

      # --- Frontend: npm ci / lint / test / build ---
      - run:
          name: "Frontend | npm ci"
          command: |
            if [ -d "habit-tracker-frontend" ]; then
              cd habit-tracker-frontend
              ( npm ci || npm install )
            else
              echo "No se encontró habit-tracker-frontend; se omite."
            fi

      - run:
          name: "Frontend | lint"
          command: |
            if [ -f "habit-tracker-frontend/package.json" ]; then
              cd habit-tracker-frontend
              ( npm run lint || echo "lint skipped or failed" )
            fi

      - run:
          name: "Frontend | tests"
          command: |
            if [ -f "habit-tracker-frontend/package.json" ]; then
              cd habit-tracker-frontend
              ( npm test -- --ci --watchAll=false || echo "tests skipped or failed" )
            fi

      - run:
          name: "Frontend | build"
          command: |
            if [ -f "habit-tracker-frontend/package.json" ]; then
              cd habit-tracker-frontend
              ( npm run build || echo "build failed or skipped" )
            fi

      # --- Simulated Deploy to /tmp + copy artifacts ---
      - run:
          name: "Deploy simulado a /tmp"
          command: |
            rm -rf "${TARGET_DIR}"
            mkdir -p "${TARGET_DIR}/backend" "${TARGET_DIR}/frontend"

            rsync -av --exclude='venv' --exclude='.git' --exclude='node_modules' ./ "${TARGET_DIR}/backend/" || true

            if [ -d "habit-tracker-frontend/build" ]; then
              rsync -av habit-tracker-frontend/build/ "${TARGET_DIR}/frontend/" || true
            else
              echo "No hay build de frontend; skip."
            fi
            echo "Artefactos listos en ${TARGET_DIR}"

      # --- Smoke test con Gunicorn ---
      - run:
          name: "Smoke test Gunicorn (127.0.0.1:8001)"
          command: |
            . "${VENV_DIR}/bin/activate"

            # Verificar Django
            python -c "import importlib.util, sys; sys.exit(0) if importlib.util.find_spec('django') else sys.exit(1)"

            if [ "$?" -eq 0 ]; then
              echo "Django encontrado. Iniciando smoke test."
              export DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
              ( python manage.py collectstatic --noinput || echo "collectstatic skipped" )
              pkill -f 'gunicorn' || true # Limpieza previa

              APP_MODULE=$(python -c "import os; m=os.environ.get('DJANGO_SETTINGS_MODULE','').replace('.settings',''); print(f'{m}.wsgi:application' if m else 'wsgi:application')")

              # --- CORRECCIÓN ---
              # Reducimos los workers a 1. El error "terminated" suele ser
              # por Out-of-Memory (OOM) al levantar 2 workers en un test.
              echo "Iniciando Gunicorn con 1 worker..."
              nohup "${VENV_DIR}/bin/gunicorn" --chdir . "${APP_MODULE}" -b 127.0.0.1:8001 --workers 1 > gunicorn.log 2>&1 &
              
              echo "Esperando 5 segundos a que Gunicorn inicie..."
              sleep 5 # Damos un poco más de tiempo

              # --- LÓGICA DE CURL MEJORADA ---
              # Si curl falla, mostramos el log de gunicorn y fallamos el build
              if curl -f http://127.0.0.1:8001/; then
                echo "Smoke test (curl) EXITOSO."
              else
                echo "Smoke test (curl) FALLÓ."
                echo "--- Mostrando log de Gunicorn (gunicorn.log) ---"
                cat gunicorn.log
                echo "--------------------------------------------------"
                exit 1 # Falla el build
              fi
              
              pkill -f 'gunicorn' || true # Limpieza final
            else
              echo "Django no disponible; se omite smoke test."
            fi

      # --- Empaquetar y publicar artefactos ---
      - run:
          name: "Empaquetar artefactos"
          command: |
            mkdir -p artifacts || true
            cp -r coverage.* artifacts/ 2>/dev/null || true
            cp -r gunicorn.log artifacts/ 2>/dev/null || true
            echo "Resultado del build: SUCCESS (si el job terminó)" > artifacts/build_status.txt || true
            tar -C /tmp -czf artifacts/habit-tracker-prod.tgz habit-tracker-prod || true

      - store_artifacts:
          path: artifacts
          destination: artifacts

      # --- Notificaciones finales a GitHub ---
      - run:
          name: "Notify success (GitHub: success)"
          when: on_success
          command: |
            if [ -n "${GH_TOKEN}" ]; then
              COMMIT_SHA="${CIRCLE_SHA1}"
              curl -sS -X POST \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/statuses/${COMMIT_SHA}" \
                -d "{
                  \"state\": \"success\",
                  \"target_url\": \"${CIRCLE_BUILD_URL}\",
                  \"description\": \"Pipeline passed\",
                  \"context\": \"CircleCI Pipeline\"
                }" || true
            fi

      - run:
          name: "Notify failure (GitHub: failure)"
          when: on_fail
          command: |
            if [ -n "${GH_TOKEN}" ]; then
              COMMIT_SHA="${CIRCLE_SHA1}"
              curl -sS -X POST \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/statuses/${COMMIT_SHA}" \
                -d "{
                  \"state\": \"failure\",
                  \"target_url\": \"${CIRCLE_BUILD_URL}\",
                  \"description\": \"Pipeline failed\",
                  \"context\": \"CircleCI Pipeline\"
                }" || true
            fi

  #Job para emular "Start Local Servers"
  start_local_servers:
    docker:
      - image: cimg/python:3.11-node
    working_directory: ~/project
    environment:
      DJANGO_SETTINGS_MODULE: "habit_tracker_backend.settings"
      PYTHONUNBUFFERED: "1"
      VENV_DIR: "venv"
    steps:
      - checkout
      - run:
          name: "Preparar backend y frontend"
          command: |
            python -m venv "${VENV_DIR}"
            . "${VENV_DIR}/bin/activate"
            python -m pip install --upgrade pip
            ( test -f requirements.txt && pip install -r requirements.txt ) \
              || ( test -f habit_tracker_backend/requirements.txt && pip install -r habit_tracker_backend/requirements.txt ) \
              || true
            export DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
            ( python manage.py migrate --noinput || true )
            if [ -d "habit-tracker-frontend" ]; then
              cd habit-tracker-frontend
              ( npm ci || npm install )
              cd ..
            fi
      - run:
          name: "Iniciar Django y React (verificación breve)"
          command: |
            . "${VENV_DIR}/bin/activate"
            nohup python manage.py runserver 0.0.0.0:8000 > django_server.log 2>&1 &
            echo $! > django_server.pid
            if [ -d "habit-tracker-frontend" ]; then
              cd habit-tracker-frontend
              nohup npm start -- --port 3000 > ../react_server.log 2>&1 &
              echo $! > ../react_server.pid
              cd ..
            fi
            sleep 8
            if [ -f django_server.pid ] && ps -p "$(cat django_server.pid)" > /dev/null 2>&1; then
              echo "Django server iniciado (PID: $(cat django_server.pid))"
            else
              echo "Django no se inició. Ver django_server.log"
            fi
            if [ -f react_server.pid ] && ps -p "$(cat react_server.pid)" > /dev/null 2>&1; then
              echo "React server iniciado (PID: $(cat react_server.pid))"
            else
              echo "React no se inició. Ver react_server.log"
            fi
            ( kill $(cat django_server.pid) 2>/dev/null || true )
            ( kill $(cat react_server.pid) 2>/dev/null || true
            ) || true
      - store_artifacts:
          path: django_server.log
          destination: servers/django_server.log
      - store_artifacts:
          path: react_server.log
          destination: servers/react_server.log

workflows:
  version: 2
  ci_pipeline:
    jobs:
      - build_and_test:
          context: [github-notify]
